package top.hiccup.algorithm.tree.bintree;

/**
 * 红黑树：节点是红色或黑色的
 *
 * 1、根节点是黑色。
 * 2、每个叶子节点都是黑色的空节点（NIL节点）。
 * 3、每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点，即红色不能与红色相邻)
 * 4、从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。
 *
 * 【变色】
 * 如果要插入到的节点刚好是黑色的，且两个叶子节点都是NIL，则直接插入并置为红色
 *
 * 如果要插入到的节点是红色的，且两个叶子节点都是NIL，而插入节点默认也是红色的，则需要把父节点变成黑色的，
 * 然后再依次递归判断父节点的左右子树，而对于父节点的更上层则需要做旋转。
 *
 * 【旋转】
 * 左旋：成为自己右子树的左子树，把右子树的左子节点当成自己的右子节点
 *
 * 右旋：成为自己左子树的右子树，把左子树的右子节点当成自己的左子节点
 *
 *
 * @author wenhy
 * @date 2019/4/26
 */
public class RedBlackTree {
}
